!! Introduction

Data frames are the one of the essential parts of the data science toolkit. They are the specialized data structures for tabular data sets that provide us with a simple and powerful API for summarizing, cleaning, and manipulating a wealth of data sources that are currently cumbersome to use.

A data frame is like a database inside a variable. It is an object which can be created, modified, copied, serialized, debugged, inspected, and garbage collected. It allows you to communicate with your data quickly and effortlessly, using just a few lines of code. DataFrame project is similar to ''pandas''${footnote:*https://pandas.pydata.org/*}$ library in Python or built-in ''data.frame''${footnote:*https://www.rdocumentation.org/packages/base/versions/3.5.3/topics/data.frame*}$ class in R.

This booklet serves as the main source of documentation for the DataFrame project in Pharo. I start by describing the complete API of DataFrame and DataSeries data structures, providing examples for each method. Then I show how data frames can be used in practice in a series of hands-on tutorials.

!!! The DataFrame project

DataFrame v1.0 was the first implementation of data frames in Pharo. I have created it in 2017 as my Google Summer of Code project and presented it at the 25th International Smalltalk Joint Conference (ESUG 2017) in Maribor, Slovenia.

Thanks to the questions, requests, and suggestions of numerous people who were using DataFrame, I was able to improve the API, fix some major bugs, make implementations of several methods a lot faster, and add new features. Now with this booklet I am happy to present you the cleaned, improved, and updated DataFrame v2.0${footnote:The source code of DataFrame can be found in the public repository on GitHub: *https://github.com/PolyMathOrg/DataFrame*}$.

!!!Who is this booklet for?

DataFrame was designed for anyone working with tabular data in Pharo. Being a data scientist myself, I made an emphasis on typical data analysis that is commonly performed in data science or machine learning workflow. However, the knowledge of machine learning or statistics is not required to read this booklet or work with DataFrame.

On the other hand, familiarity with Pharo programming language and environment is a prerequisite. In the next section, I briefly describe what Pharo is. But I also strongly recommend you to learn Pharo and make sure that you are comfortable with it before you proceed to the next chapters.

DataFrame was designed in traditions of Smalltalk and with ''smalltalkers'' in mind. If you come from Python, R, or SQL background, some elements of API might seem strange for you. But stick around and you will come to love the Smalltalk ways.

!!! What is Pharo?

Pharo is a dynamic, purely object-oriented programming language (everything is an object) in the tradition of Smalltalk. But it is also a powerful development environment, focused on simplicity and immediate feedback. Its entire syntax fits on a postcard, and coding can be done directly in the debugger. Pharo has super cool tools that empower you and make you highly efficient.

Pharo's goal is to deliver a clean, innovative, free and open-source immersive environment. By providing a stable and small core system, excellent development tools, and maintained releases, Pharo is an attractive platform to build and deploy mission-critical applications.

Pharo fosters a healthy ecosystem developed from both private and commercial contributors who advance and maintain the core system and its external packages. More information about Pharo is available at http://www.pharo.org/. If you are new to Pharo, I suggest you to take Pharo MOOC${footnote:*https://mooc.pharo.org/*}$ or read Pharo by Example${footnote:*https://books.pharo.org/updated-pharo-by-example/*}$ book.

DataFrame v2.0 was tested on stable versions of Pharo 6.1 and Pharo 7.0, as well as the development version of Pharo 8. Through the continuous integration (CI) and 90\% code coverage by unit tests, we try to make sure that DataFrame is working well on every latest stable and development version of Pharo on all major operating systems: Linux, Mac OS, and Windows, as well as both 32-bit and 64-bit architectures.

So before moving on to the next chapter, go to *https://pharo.org/download* and get yourself the latest Pharo. I strongly suggest that you try out all the examples as you read this booklet. It will help you understand what data frames are and how they can be used.

!!! The PolyMath project

DataFrame was originally created as part of the PolyMath project - an open-source initiative that brings the power of scientific computing to Pharo. It started with the creation of the ''PolyMath''${footnote:https://github.com/PolyMathOrg/PolyMath}$ library - a general purpose numerical computation framework in Pharo, similar to ''numpy''${footnote:*http://www.numpy.org/*}$ and ''scipy''${footnote:*https://www.scipy.org/scipylib/index.html*}$ libraries in Python, as well as ''SciRuby''${footnote:*http://sciruby.com/*}$ library and the built-in functionality R and Julia.

PolyMath provides two main data structures: ==PMMatrix== and ==PMVector==, and covers topics such as statistical moments, polynomials, interpolations, integration, series (not to be confused with data series that will be discussed in the following chapters), vector algebra, ordinary differential equations, complex numbers, quaternions, KD-trees, random number generation, arbitrary floating-point arithmetics, etc.

The original version of PolyMath was described in the book ''Numerical methods in Smalltalk'' by Didier Besset${footnote:Available at *http://books.pharo.org*}$. Since then, PolyMath has changed a lot, and now, thanks to many different contributors, it has grown into a fully functional framework for numerical computations.

Besides PolyMath itself, the PolyMath organization on GitHub hosts other projects, including DataFrame, described in this booklet, and ''libtensorflow-pharo-bindings''${footnote:*https://github.com/PolyMathOrg/libtensorflow-pharo-bindings*}$ -- a Pharo bridge to Google's ''TensorFlow''${footnote:*https://www.tensorflow.org/*}$ library.

!!! Terminology

At this point, you have probably noticed that, depending on the context, the phrase "data frame" can refer to different things. It can be a data structure, a class, a package, or this whole project. In order to remove these ambiguities from our language, I propose the following terminology and stick to it in this booklet:

;data frame
:\-- general reference to the tabular data structure for data analysis, their rows and columns.
;data series
:\-- general reference to a row or column of a data frame, represented with ==DataSeries== - a dedicated data structure described in the next chapter.
;DataFrame
:\-- class name of a data structure that models a data frame, reference to DataFrame package or DataFrame project.
;DataSeries
:\-- class name of a data structure used to model a data series.

!!! Structure of this booklet

@@todo Needs to be updated

The rest of this booklet is structured in the following way:
-""Part I. Documentation"" - in this part I document the complete API of DataFrame and DataSeries data structures.
--""Chapter 1. DataSeries"" - this chapter documents the dictionary-like data structure that is used by DataFrame as a representation of its rows and columns.
--""Chapter 2. DataFrame"" - here you will find the documentation of the central data structure of the DataFrame package.
-""Part II. Tutorials"" - a series of short tutorials that will teach you to work with data frames and demonstrate how they can be applied to practical problems.

!!! How to contribute?

DataFrame is an open source project released under the MIT public license. Although the original codebase was written by me, DataFrame project is a collaborative effort of many people who helped me with their advice, shared their ideas, reported issues, and suggested how to resolve them. There are many ways in which you can help make DataFrame better.

If you want to implement new functionality or improve the existing one by rewriting some methods or fixing a bug, you can fork DataFrame repository on GitHub, make your changes, and create a pull request.

But contributions can be more simple and less time consuming. You can report a bug, suggest a better API, or request new features for DataFrame. All that can be done by creating dedicated issues on in DataFrame's repository on GitHub.

Positive feedback is also very important. It is always very encouraging to hear how people use your project. So if you want to share your experience of working or just playing with DataFrame, you can write about it on social media using ==#Pharo== and ==#PharoDataFrame== hashtags. Also, feel free to contact me by email at ''olk.zaytsev\@gmail.com''.
