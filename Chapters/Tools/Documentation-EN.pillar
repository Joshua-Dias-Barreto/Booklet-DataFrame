!! Live documentation with GTDocumenter

GTDocumenter is a tool developed by feenk for creatind and interacting with live documents inside a development environment. Documents created by GTDocumenter are written in Pillar, which allows us to compile them to PDF (such as this booklet) or HTML. In this chapter I discuss the integration of DataFrame into GTDocumenter and explain how this tool can be used in a typical data science workflow.

!!! Interactive notebooks

+Interactive notebook>figures/colab.png|width=100|label=colab+

Initially created for documenting research and making it more reproducible, interactive notebooks became the most widely used tool in everyday workflow of many researchers. Notebooks combine text, visualizations, and executable blocks source code into a single document which can be published, shared and collaborated on. You run the code samples as you read the notebook, and see results of each evaluation right in place.

Notebooks are widely used by data scientists either for quick exploration tasks or for presentation and storytelling. In many cases are also used for training low scale machine learning models. It also becomes more common to use interactive notebooks instead of PowerPoint presentations in classrooms, online courses, and workshops. Students can follow the lecture and reproduce the examples in real time, solve the assignemnts, and collaborate with each other.

Some of the most widely used tools for creating interactive notebooks inctude Jupyter${footnote:http://jupyter.org/}$, R Markdown${footnote:https://rmarkdown.rstudio.com/}$, Apache Zeppelin${footnote:https://zeppelin.apache.org/}$, Google Collab${footnote:https://colab.research.google.com/}$. I believe that implementing such notebooks in Pharo is one of the most important steps for building a toolking for data science and numerical computations.

!!! JupyterTalk

Though this chapter is dedicated to GTDocumenter and how it can be used together with DataFrame, I will briefly mention one other project that takes a different approach for bringing interactive notebooks to Pharo. JupyterTalk is a Pharo Smalltalk kernel for Jupiter Notebook developed by Jesús Marí Aguirre. It allows us to use Jupyter with Pharo just as we use it with Python and provides integration for both Roassal and DataFrame.

+JupyterTalk allows us to evaluate Pharo code in Jupyter Notebooks>figures/JupyterTalk.png|width=90|label=jupytertalk+

With JupyterTalk we can evaluate Pharo code in web-based notebooks. This comes with a price of losing some of the most important features of Pharo environment. Nevertheless, I think that for reproducability and accesibility of research, integration with Jupyter is just as important as building native Pharo notebooks such as GTDocumenter. It would allow researchers to share their results with wider community of colleagues who may not use Pharo but will have no problem evaluating code blocks inside a familiar web-based notebook.

!!! Working with DataFrame in GTDocumenter

Every time DataFrame is evaluated inside GTDocumenter, a special method is called which returns this DataFrame as a Block view called ColumnedList.