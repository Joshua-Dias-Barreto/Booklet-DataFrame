!! DataSeries

A DataSeries is kind of dictionary. It manages data based on keys. A ==DataSeries== is the elementary part of a ==DataFrame==.
A ==DataFrame== returns ==DataSeries== when asked about a given column or row. 

!!! Example first

Let us create a DataSeries from an array. 
[[[
series := DataSeries fromArray: #('a' 'b' 'c').
series at: 2
>>> 'b'
]]]

[[[
series := DataSeries fromArray: #('a' 'b' 'c').
series keys: #(#k1 #k2 #k3).
series at: k3
>>> 'c'
]]]

!!! Creating DataSeries

DataSeries can be created from an array of values as follows

[[[
series := DataSeries fromArray: #('a' 'b' 'c').
]]]

DataFrame extends the ==Collection== class so that we can get an instance of a DataSeries by sending the message ==asDataSeries== to a collection.

[[[
series := #('a' 'b' 'c') asDataSeries.
]]]

By default the keys will be initialized with an interval ==(1 to: self size)==. The name of a newly created series is considered empty and set by default to ==nil==.
 You can always change the name and keys of your series using the messages ==name:== and ==keys:==.

[[[
series name: 'letters'.
series keys: #(k1 k2 k3).
]]]

!!! Accessing elements of DataSeries

When accessing the elements of a DataSeries, you can think of is as an Array. The ==at:== message allows you to access elements by their index, with ==at:put:== you can modify the given element.

[[[
#(a b c) asDataSeries at: 2.
>>> #b
]]]

[[[
series at: 3 put: 'x'.
]]] 

Besides the standard Array accessors, ==DataSeries== provides additional operations for accessing elements by their keys:

[[[
series := #(a b c) asDataSeries.
series keys:  #(k1 k2 k3).
series atKey: #k2.
>>> #b
]]]

[[[
series atKey: #k3 put: 'x'.
]]] 

Messages for enumerating, such as ==do:== or ==withIndexDo:== work the same as in Array, and the ==collect:== message creates a new DataSerie preserving the name and keys of the receiver.

[[[
series := #(a b c) asDataSeries.
series name: 'letters'.
series keys: #(k1 k2 k3).
newSeries := series collect: [ :each | each, 'x' ].
newSeries name.         
>>> 'letters'
newSeries atKey: 'k1'.  
>> 'ax'
]]]

!!! Adding new elements to DataSeries
Since all the elements of ==DataSeries== are expected to have keys, to add a new element you must specify a key that should be associated with it.
The following example add the element

[[[
series add: 'x' atKey: #k4.
]]] 

Another way of adding an element to a ==DataSeries== is by using the ==atKey:put:== message with a non-existing key. Inspired by Pandas, ==atKey:put:== modifies an element at a given key if such key exists in a DataSeries, or adds a new element associated with that key, if it wasn't found.

[[[
series atKey: #k4 put: 'x'.
]]]

!!! Conclusion

==DataSeries== is a simple kye of dictionary that is used by ==DataFrame== to represent data.



